@page
@model SalonDeBelleza.src.views.Citas.CitasColaboradorModel
@{
    ViewData["Title"] = "Agenda de Citas";
    if (Model.Rol == "Colaborador")
    {
        Layout = "~/src/views/Shared/LayoutColab.cshtml";
    }
    else
    {
        Layout = "~/src/views/Shared/LayoutAdmin.cshtml";
    }
}

<link href="~/css/CitasColaborador.css" rel="stylesheet" />


<div class="calendar-container">
    <h1 class="page-title">Agenda de Citas</h1>

    <input type="hidden" id="UserID" value="@Model.UserID">
    <input type="hidden" id="Rol" value="@Model.Rol">

    <div id="calendario"></div>

    <div class="calendar-actions">
        <button class="action-button secondary" onclick="window.location.href='/Home/Administrador'">
            <i class="fas fa-arrow-left"></i> Regresar
        </button>
    </div>

    <!-- Modal de detalles de cita -->
    <div id="modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Detalles de la Cita</h3>
                <button class="close-button" onclick="cerrarModal()">&times;</button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="citaId">

                <div class="form-group">
                    <label class="form-label">Cliente:</label>
                    <span id="modalCliente" class="form-value"></span>
                </div>

                <div class="form-group">
                    <label class="form-label">Servicio:</label>
                    <span id="modalServicio" class="form-value"></span>
                </div>

                <div class="form-group">
                    <label class="form-label">Fecha y Hora:</label>
                    <input type="datetime-local" id="modalFechaHora" class="form-input">
                </div>

                <div class="form-group">
                    <label class="form-label">Estado:</label>
                    <select id="modalEstado" class="form-input">
                        <option value="Pendiente">Pendiente</option>
                        <option value="Confirmada">Confirmada</option>
                        <option value="Completada">Completada</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">Notas:</label>
                    <textarea id="modalNotas" class="form-input" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-actions">
                <button class="action-button primary" onclick="guardarCambios()">
                    <i class="fas fa-save"></i> Guardar Cambios
                </button>
                <button class="action-button danger" onclick="cancelarCita()">
                    <i class="fas fa-times"></i> Cancelar Cita
                </button>
                <button class="action-button secondary" onclick="cerrarModal()">
                    <i class="fas fa-times"></i> Cerrar
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Agrega Font Awesome para los íconos -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<!-- Agrega FullCalendar -->
<link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.0/main.min.css" rel="stylesheet">



<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.0/main.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.0/locales/es.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", async function () {
        let calendarEl = document.getElementById("calendario");
        let calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: "dayGridMonth",
            locale: "es",
            headerToolbar: {
                left: "prev,next today",
                center: "title",
                right: "dayGridMonth,timeGridWeek,timeGridDay"
            },
            buttonText: {
                today: "Hoy",
                month: "Mes",
                week: "Semana",
                day: "Día"
            },
            events: async function (fetchInfo, successCallback, failureCallback) {
                try {
                    let colaboradorId = document.getElementById("UserID").value;
                    let rol = document.getElementById("Rol").value;

                    let url = rol === "Administrador"
                        ? "/api/citas/agenda"
                        : `/api/citas/agenda?colaboradorId=${colaboradorId}`;

                    let response = await fetch(url);
                    let citas = await response.json();

                    let eventos = citas.map(c => ({
                        id: c.citaID,
                        title: `${c.servicio} - ${c.cliente}`,
                        start: c.fechaHora,
                        className: `fc-event-${c.estado.toLowerCase()}`,
                        extendedProps: {
                            estado: c.estado
                        }
                    }));

                    successCallback(eventos);
                } catch (error) {
                    console.error("Error cargando citas:", error);
                    failureCallback(error);
                }
            },
            eventClick: function(info) {
                abrirModal(info.event);
            },
            eventDidMount: function(info) {
                // Tooltip con más información
                info.el.setAttribute('title', `${info.event.title}\nEstado: ${info.event.extendedProps.estado}`);
            }
        });

        calendar.render();
    });

    function abrirModal(evento) {
        let modal = document.getElementById("modal");
        modal.style.display = "block";

        // Obtener detalles completos de la cita
        fetch(`/api/citas/detalle/${evento.id}`)
            .then(response => response.json())
            .then(cita => {
                document.getElementById("citaId").value = cita.citaID;
                document.getElementById("modalCliente").textContent = cita.cliente;
                document.getElementById("modalServicio").textContent = cita.servicio;

                if (cita.fechaHora) {
                    let fechaHora = cita.fechaHora.slice(0, 16);
                    document.getElementById("modalFechaHora").value = fechaHora;
                }

                document.getElementById("modalEstado").value = cita.estado;
                document.getElementById("modalNotas").value = cita.notas || "";
            })
            .catch(error => {
                console.error("Error obteniendo detalles de la cita:", error);
                alert("Error al cargar los detalles de la cita");
            });
    }

    function cerrarModal() {
        document.getElementById("modal").style.display = "none";
    }

    async function guardarCambios() {
        let id = document.getElementById("citaId").value;
        let fechaHora = document.getElementById("modalFechaHora").value;
        let estado = document.getElementById("modalEstado").value;
        let notas = document.getElementById("modalNotas").value;

        if (!fechaHora) {
            alert("Por favor, selecciona una fecha y hora válida");
            return;
        }

        let formData = new URLSearchParams();
        formData.append("fechaHora", fechaHora);
        formData.append("estado", estado);
        formData.append("notas", notas);

        try {
            let response = await fetch(`/api/citas/editar/${id}`, {
                method: "PUT",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: formData.toString()
            });

            if (response.ok) {
                alert("✅ Cita actualizada correctamente");
                cerrarModal();
                window.location.reload();
            } else {
                let error = await response.json();
                alert(`❌ Error al actualizar: ${error.message || 'Inténtalo de nuevo'}`);
            }
        } catch (error) {
            console.error("Error al actualizar cita:", error);
            alert("❌ Error de conexión al actualizar la cita");
        }
    }

    async function cancelarCita() {
        if (!confirm("¿Estás seguro de que deseas cancelar esta cita?")) {
            return;
        }

        let id = document.getElementById("citaId").value;

        try {
            let response = await fetch(`/api/citas/cancelar/${id}`, {
                method: "DELETE"
            });

            if (response.ok) {
                alert("✅ Cita cancelada correctamente");
                cerrarModal();
                window.location.reload();
            } else {
                let error = await response.json();
                alert(`❌ Error al cancelar: ${error.message || 'Inténtalo de nuevo'}`);
            }
        } catch (error) {
            console.error("Error al cancelar cita:", error);
            alert("❌ Error de conexión al cancelar la cita");
        }
    }
</script>