@page
@model SalonDeBelleza.src.views.Citas.CitasClienteModel
@{
    ViewData["Title"] = "Mis Citas";
    Layout = "~/src/views/Shared/LayoutDashboard.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="~/css/CitasCliente.css" rel="stylesheet" />
    <title>Document</title>

    <style>

    </style>
</head>
<body>
    <div class="appointments-dashboard">
        <!-- Header -->
        <div class="dashboard-header">
            <h1 class="dashboard-title">
                <i class="fas fa-calendar-alt"></i> Mis Citas
            </h1>
            <a href="/Home/Cliente" class="back-button">
                <i class="fas fa-arrow-left"></i> Regresar
            </a>
        </div>

        <!-- Hidden Fields -->
        <input type="hidden" id="UserID" value="@Model.UserID">
        <input type="hidden" id="Rol" value="@Model.Rol">
        <input type="hidden" id="Nombre" value="@Model.Nombre">

        <!-- Appointments Table -->
        <div class="table-container">
            <table class="appointments-table">
                <thead>
                    <tr>
                        <th class="table-header">Servicio</th>
                        <th class="table-header">Fecha</th>
                        <th class="table-header">Estado</th>
                        <th class="table-header">Acciones</th>
                    </tr>
                </thead>
                <tbody id="tablaCitasBody"></tbody>
            </table>
        </div>

        <!-- Appointment Details Modal -->
        <div id="modalCita" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Detalles de la Cita</h3>
                    <button class="close-button" onclick="cerrarModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="citaId">

                    <div class="modal-detail">
                        <span class="detail-label">Servicio:</span>
                        <span id="modalServicio" class="detail-value"></span>
                    </div>

                    <div class="modal-detail">
                        <span class="detail-label">Colaborador:</span>
                        <span id="modalColaborador" class="detail-value"></span>
                    </div>

                    <div class="modal-detail">
                        <span class="detail-label">Fecha y Hora:</span>
                        <input type="datetime-local" id="modalFechaHora" class="detail-input" disabled>
                    </div>

                    <div class="modal-detail">
                        <span class="detail-label">Estado:</span>
                        <span id="modalEstado" class="status-badge"></span>
                    </div>

                    <div class="modal-detail">
                        <span class="detail-label">Notas:</span>
                        <textarea id="modalNotas" class="detail-textarea" readonly></textarea>
                    </div>
                </div>
                <div class="modal-actions">
                    <button class="action-button success" onclick="confirmarAsistencia()">
                        <i class="fas fa-check-circle"></i> Confirmar
                    </button>
                    <button class="action-button danger" onclick="cancelarCita()">
                        <i class="fas fa-times-circle"></i> Cancelar
                    </button>
                    <button class="action-button secondary" onclick="cerrarModal()">
                        <i class="fas fa-times"></i> Cerrar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            let userId = document.getElementById("UserID").value;
            let response = await fetch(`/api/citas/cliente?userId=${userId}`);
            let citas = await response.json();

            let tablaCitas = document.getElementById("tablaCitasBody");
            tablaCitas.innerHTML = "";

            citas.forEach(c => {
                let fecha = new Date(c.fechaHora);
                let fechaFormateada = isNaN(fecha) ? "Fecha no disponible" :
                    fecha.toLocaleDateString('es-ES', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                    });

                let fila = document.createElement("tr");
                fila.innerHTML = `
                    <td>${c.servicio || "No disponible"}</td>
                    <td>${fechaFormateada}</td>
                    <td><span class="status-badge ${getEstadoClass(c.estado)}">${c.estado || "Sin estado"}</span></td>
                    <td class="actions-cell">
                        <button class="action-button info" onclick="verCita(${c.citaID})">
                            <i class="fas fa-eye"></i> Ver
                        </button>
                    </td>
                `;
                tablaCitas.appendChild(fila);
            });
        });

        function getEstadoClass(estado) {
            if (!estado) return "";
            estado = estado.toLowerCase();

            if (estado.includes("pendiente")) return "pendiente";
            if (estado.includes("confirmada")) return "confirmada";
            if (estado.includes("cancelada")) return "cancelada";
            if (estado.includes("completada")) return "completada";
            return "";
        }

        async function verCita(citaID) {
            let response = await fetch(`/api/citas/detalle/${citaID}`);
            let cita = await response.json();

            document.getElementById("citaId").value = cita.citaID;
            document.getElementById("modalServicio").textContent = cita.servicio || "No disponible";
            document.getElementById("modalColaborador").textContent = cita.colaborador || "No asignado";

            if (cita.fechaHora) {
                let fechaHora = cita.fechaHora.slice(0, 16);
                document.getElementById("modalFechaHora").value = fechaHora;
            }

            document.getElementById("modalEstado").textContent = cita.estado || "Sin estado";
            document.getElementById("modalEstado").className = `status-badge ${getEstadoClass(cita.estado)}`;
            document.getElementById("modalNotas").value = cita.notas || "Sin notas";

            // Mostrar u ocultar botones según el estado
            let btnConfirmar = document.querySelector(".action-button.success");
            let btnCancelar = document.querySelector(".action-button.danger");

            if (cita.estado && cita.estado.toLowerCase().includes("pendiente")) {
                btnConfirmar.style.display = "inline-flex";
                btnCancelar.style.display = "inline-flex";
            } else {
                btnConfirmar.style.display = "none";
                btnCancelar.style.display = "none";
            }

            // Mostrar modal
            document.getElementById("modalCita").style.display = "block";
        }

        function cerrarModal() {
            document.getElementById("modalCita").style.display = "none";
        }

        async function cancelarCita() {
            let id = document.getElementById("citaId").value;
            let fechaHora = document.getElementById("modalFechaHora").value;

            if (!fechaHora) {
                alert("No se puede determinar la fecha de la cita.");
                return;
            }

            let fechaCita = new Date(fechaHora);
            let ahora = new Date();
            let diferenciaHoras = (fechaCita - ahora) / (1000 * 60 * 60);

            let mensaje = diferenciaHoras <= 24 ?
                "⚠️ Cancelar la cita dentro de las 24 horas puede generar penalización. ¿Deseas continuar?" :
                "¿Estás seguro de que deseas cancelar la cita?";

            if (confirm(mensaje)) {
                try {
                    let response = await fetch(`/api/citas/cancelar/${id}`, {
                        method: "DELETE"
                    });

                    if (response.ok) {
                        alert("✅ Cita cancelada correctamente.");
                        location.reload();
                    } else {
                        let error = await response.json();
                        alert(`❌ Error al cancelar la cita: ${error.message || 'Inténtalo de nuevo.'}`);
                    }
                } catch (error) {
                    console.error("Error al cancelar cita:", error);
                    alert("❌ Ocurrió un error en la conexión.");
                }
            }
        }

        async function confirmarAsistencia() {
            let id = document.getElementById("citaId").value;

            if (!confirm("¿Confirmas que asistirás a esta cita?")) {
                return;
            }

            try {
                let response = await fetch(`/api/citas/confirmar/${id}`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    }
                });

                if (response.ok) {
                    alert("✅ Cita confirmada correctamente.");
                    location.reload();
                } else {
                    let error = await response.json();
                    alert(`❌ Error al confirmar la cita: ${error.message || 'Inténtalo de nuevo.'}`);
                }
            } catch (error) {
                console.error("Error al confirmar cita:", error);
                alert("❌ Ocurrió un error en la conexión.");
            }
        }
    </script>
</body>
</html>
